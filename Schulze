# -*- coding: utf-8 -*-
# <nbformat>3.0</nbformat>

# <codecell>

import os
import numpy as np 
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.patches import Arc, FancyBboxPatch
from IPython.display import display

%matplotlib inline

try:
    matriu
    p0 = raw_input("Vols mantenir la matriu anterior? (si/no)   ")
    
    if p0 == "si":
        
        restart = False
        
        p1 = input("Tria el número del programa que vols utilitzar: 1-Estudi general; 2-Graf; 3-Matrius i guanyadors    ")
        
        p2 = input("Quin mètode de Schulze vols utilitzar: 1-Vots guanyadors; 2-Restes    ")
        
        if p1 == 2 and p12 == 2:
        
            p121 = raw_input("Indica la opció inicial i final (ex: A-B):    ")
   
    else:
        raise NameError
        
        
except NameError:
    
    restart = True
    
    p1 = input("Tria el número del programa que vols utilitzar: 1-Estudi general; 2-Graf; 3-Matrius i guanyadors    ")
    
    p2 = input("Quin mètode de Schulze vols utilitzar: 1-Vots guanyadors; 2-Restes    ")
          
    n = input("Quantes opcions o candidats hi ha?    ")
    
    if p1 == 2:
        
        p12 = input("Quin tipus de graf vols representar: 1-General; 2-Resaltar camí més fort    ")
                    
        if p12 == 2:
        
            p121 = raw_input("Indica la opció inicial i final (ex: A-B):    ")
        
    else:
        p12 = 1
    
    p3 = input("Com insertaràs la matriu de comparació per parelles? 1-Manual; 2-Aleatori    ")
        
    if p3 == 2:
                
        p31 = input("Les butlletes poden estar incomplertes? 1-Sí; 2-No    ")
    

#---------------------------------------------------------------------------------------------------------
# Matriu input = matriu



if restart == True and p3 == 1:
    mat = []
    fila = []
    candidats = []

    for i in range(n):
        candidats.append(chr(65+i))
        for j in range(n):
            fl = input("{} vs {}  ".format(chr(65+i), chr(65+j)))
            fila.append(float(fl))
        mat.append(fila)
        fila = []

    matriu = pd.DataFrame(mat, columns=candidats, index=candidats)

if restart == True and p3 == 2:

    mat = []
    fila = []
    candidats = []
    
    if p31 ==1:
        vrand = 15
    else:
        vrand = 0
    
    for i in range(n):
        candidats.append(chr(65+i))
        for j in range(n):
            fila.append(float(0))
        mat.append(fila)
        fila = []
    
    for i in range(n):
        for j in range(n):
            if i != j:
                mat[i][j] = np.random.randint(0,100)
                mat[i][j] = int(mat[i][j]*float(np.random.randint(100-vrand,101)/100.0))
                mat[j][i] = int((100-mat[i][j])*float(np.random.randint(100-vrand,101)/100.0))
            
    matriu = pd.DataFrame(mat, columns=candidats, index=candidats)



#--------------------------------------------------------------------------------------------------------
# Matriu de Schulze = p


P = []
p = []

for i in range(n):
    
    for j in range(n):
        p.append(0)
    
    P.append(p)
    p = []

if p2 == 2:
    P = (matriu - matriu.T).as_matrix()
        
for i in range(n):
    for j in range(n):
        if i != j :
            if p2 == 1:
                if matriu.iloc[i,j] > matriu.iloc[j,i]:
                    P[i][j] = matriu.iloc[i,j]
                else:
                    P[i][j] = 0
            if p2 == 2:
                if P[i][j] < 0:
                    P[i][j] = 0
                
                

PP = P

for i in range(n):
    for j in range(n):
        if i != j :
            for k in range(n):
                if i != k and j != k:

                    P[j][k] = max(P[j][k], min(P[j][i], P[i][k]))
                    
                    
                    
p = pd.DataFrame(P, columns=candidats, index=candidats)


#-----------------------------------------------------------------------------------------------------
# Guanyadors = G


res = []
re = []

for i in range(n):
    
    for j in range(n):
        re.append(0)
    
    res.append(re)
    re = []
    
for i in range (n):
    for j in range(n):
        if i != j:
            if P[i][j] > P[j][i]:
                res[i][j] = res[i][j]+1

resultatM = np.matrix(res)
resM = resultatM.T

vect = np.zeros(n)
vectR = np.zeros(n)
for i in range(n):
    vect = np.array(resM[i])
    vectR = vectR+vect
    
llistaG = []

J = -1
for j in range(n):
    for i in range(n):
        if n-1-j == vectR[0,i]:
            if j == J:
                llistaG.append("="+chr(65+i))
            else:
                if J == -1:
                    llistaG.append(chr(65+i))
                    J = j
                else:
                    llistaG.append(">"+chr(65+i))


G = ""
for i in range(n):
    G = G+llistaG[i]



#---------------------------------------------------------------------------------------------------
# Matriu de camins = pn


D = []
d = []

for i in range(n):
    
    for j in range(n):
        d.append(0)
    
    D.append(d)
    d = []
    
for i in range(n):
    for j in range(n):
        if i != j :
            if matriu.iloc[i,j] > matriu.iloc[j,i]:
                D[i][j] = [matriu.iloc[i,j], i, j]
                
            else:
                D[i][j] = [0, i, j]

                
                
for i in range(n):
    for j in range(n):
        if i != j :
            for k in range(n):
                if i != k and j != k:
                    if D[j][k][0] < min(D[j][i][0], D[i][k][0]):
                        
                        D[j][k] = [min(D[j][i][0], D[i][k][0])]
                        
                        for l in range(len(D[j][i])-1):
                            D[j][k].append(D[j][i][1+l])
                        for m in range(len(D[i][k])-2):
                            D[j][k].append(D[i][k][2+m])
                        

        
mx = D
pn = pd.DataFrame(D, columns=candidats, index=candidats)


#---------------------------------------------------------------------------------------------

if p1 == 1 or p1 == 3:
    print("Matriu de comparació per parelles")
    display(matriu)
    if p2 ==1:
        print("Matriu de Schulze de vots guanyadors")
    else:
        print("Matriu de Schulze de restes")
    display(p)
    print("Ordre de guanyadors")
    display(G)

#---------------------------------------------------------------------------------------------
if p1 == 1 or p1 == 2:
    
    IX = -1
    JX = -1 
    estatFletxes = []
    numFletxa = []
    
    for i in range(n):
        for j in range(n-i):
            if matriu.iloc[i, j+i]>matriu.iloc[j+i, i]:
                numFletxa.append(int(matriu.iloc[i, j+i]))
                estatFletxes.append(1)
            else:
                if matriu.iloc[i, j+i] != 0:
                    if matriu.iloc[i, j+i] == matriu.iloc[j+i, i] :
                        numFletxa.append("X")
                        estatFletxes.append(2)
                    else:
                        numFletxa.append(int(matriu.iloc[j+i, i]))
                        estatFletxes.append(0)
                else:
                    if i != j+i:
                        numFletxa.append("X")
                        estatFletxes.append(2) 
    
                    
    ###---------------------------------------------------------------------------------------------------
    
    
    
    f = 10
    x = 1*f
    y = 5
    radi = .5*f
    h = 1*0.2
    w = 1
    h2 = 3.7
    w2 = float((n*f-1)/float(n))
    
    estil = ["LArrow", "RArrow", "Round"]
    
    
    plt.figure(figsize=(15,15))
    axes = plt.gca()
    axes.set_xlim(0, n*f)
    axes.set_ylim(0, 6*(n)+2)
    axes.set_aspect(1)
    
    
    ###----------------------------------------------------------------------------------------------------
    
    
    
    
    box = FancyBboxPatch((.5,1), n*f-1, 6*(n), "square", facecolor="white")
    axes.add_patch(box)
    axes.set_axis_off()
    k=-1
        
    if p12 == 1:
        for j in range(n-1):
            for i in range(n-(j+1)):
                arc = Arc((x+i*0.5*f+j*f,y), 2*radi*(i+1), 2*radi*(i+1), 0, 0, 180, color="black")
                axes.add_patch(arc)
    else:
        
        for j in range(n-1):
            for i in range(n-(j+1)):
                arc = Arc((x+i*0.5*f+j*f,y), 2*radi*(i+1), 2*radi*(i+1), 0, 0, 180, color="black")
                axes.add_patch(arc)
                
                
        IX = ord(p121[0]) - 65
        JX = ord(p121[2]) - 65
    
        for K in range(len(mx[IX][JX])-2):
            Ix = mx[IX][JX][(1+K)]
            Jx = mx[IX][JX][(2+K)]
            
            jx = min(Ix,Jx)
            ix = np.abs(Ix-Jx)-1
            arc = Arc((x+ix*0.5*f+jx*f,y), 2*radi*(ix+1), 2*radi*(ix+1), 0, 0, 180, color="red", linewidth = 3)
            axes.add_patch(arc)
            
       
    
    for j in range(n-1):
        for i in range(n-(j+1)):
            k=k+1
            fletxa = FancyBboxPatch((x+i*0.5*f+j*f-w/1.9,y+((1+i)*0.5*f)-h/2), w, h, estil[estatFletxes[k]] ,facecolor="white")
            axes.add_patch(fletxa)
            axes.text(x+i*0.5*f+j*f+.1, y+((1+i)*0.5*f-.25), "{}".format(numFletxa[k]), ha="center", size = 23-2.1*n)
    
    for i in range(n):
        if i == IX or i == JX:
            axes.text(x-0.5*f+i*f, y-2.5, candidats[i], ha="center", size = 40-3*n, color = "red")
        else:
            axes.text(x-0.5*f+i*f, y-2.5, candidats[i], ha="center", size = 40-3*n, color = "black")
            
        box = FancyBboxPatch((.5+i*w2,1), w2, h2, "square", facecolor="gray", alpha=0.3)
        axes.add_patch(box)
        
        
    #-------------------------------------------------------------------------------------------------------------
